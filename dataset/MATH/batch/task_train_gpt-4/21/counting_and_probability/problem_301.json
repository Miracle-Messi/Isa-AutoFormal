{
    "natural problem": "In how many distinct ways can I arrange my five keys on a keychain, if I want to put my house key next to my car key? Two arrangements are not considered different if the keys are in the same order (or can be made to be in the same order without taking the keys off the chain--that is, by reflection or rotation).",
    "natural solution": [
        "First, put the house key and car key next to each other on the keychain. It doesn't matter where they are put, because the keychain can be rotated and reflected to move them to any other pair of adjacent locations.",
        "The remaining three keys can be put on the keychain in $3!=\\boxed{6}$ ways."
    ],
    "natural answer": "6",
    "a_0": {
        "formal problem": "theorem\nfixes keys :: nat\nassumes h0 : \"keys = 5\"\nand h1 : \"house_key_next_to_car_key\"\nshows  \"distinct_arrangements = 6\"",
        "formal solution": "(* ### Problem\n In how many distinct ways can I arrange my five keys on a keychain, if I want to put my house key next to my car key? Two arrangements are not considered different if the keys are in the same order (or can be made to be in the same order without taking the keys off the chain--that is, by reflection or rotation). The final Answer is 6\n ### Proof\n First, put the house key and car key next to each other on the keychain. It doesn't matter where they are put, because the keychain can be rotated and reflected to move them to any other pair of adjacent locations.\n The remaining three keys can be put on the keychain in $3!=\\boxed{6}$ ways.\n *)\n\ntheorem\nfixes keys :: nat\nassumes h0 : \"keys = 5\"\nand h1 : \"house_key_next_to_car_key\"\nshows  \"distinct_arrangements = 6\"\n proof- \n  show ?thesis sledgehammer",
        "informal problem": "You have 5 keys, and the house key is next to the car key. How many distinct arrangements are there? The final answer is 6."
    },
    "a_1": {
        "formal problem": "theorem\nfixes key_permutations :: nat\nassumes h0 : \"key_permutations = card {p. bij p \\<and> p 1 = house_key \\<and> p 2 = car_key}\"\nshows  \"key_permutations = 6\"",
        "formal solution": "(* ### Problem\n In how many distinct ways can I arrange my five keys on a keychain, if I want to put my house key next to my car key? Two arrangements are not considered different if the keys are in the same order (or can be made to be in the same order without taking the keys off the chain--that is, by reflection or rotation). The final Answer is 6\n ### Proof\n First, put the house key and car key next to each other on the keychain. It doesn't matter where they are put, because the keychain can be rotated and reflected to move them to any other pair of adjacent locations.\n The remaining three keys can be put on the keychain in $3!=\\boxed{6}$ ways.\n *)\n\ntheorem\nfixes key_permutations :: nat\nassumes h0 : \"key_permutations = card {p. bij p \\<and> p 1 = house_key \\<and> p 2 = car_key}\"\nshows  \"key_permutations = 6\"\n proof- \n  show ?thesis sledgehammer",
        "informal problem": "How many ways can the keys be arranged such that the house key is first and the car key is second? The final answer is 6."
    },
    "a_2": {
        "formal problem": "theorem\nfixes key_permutations :: nat\nassumes h0 : \"key_permutations = card {p. p permutes {1, 2, 3, 4, 5} \\<and> house_key_next_to_car_key p}\"\nshows  \"key_permutations = 6\"",
        "formal solution": "(* ### Problem\n In how many distinct ways can I arrange my five keys on a keychain, if I want to put my house key next to my car key? Two arrangements are not considered different if the keys are in the same order (or can be made to be in the same order without taking the keys off the chain--that is, by reflection or rotation). The final Answer is 6\n ### Proof\n First, put the house key and car key next to each other on the keychain. It doesn't matter where they are put, because the keychain can be rotated and reflected to move them to any other pair of adjacent locations.\n The remaining three keys can be put on the keychain in $3!=\\boxed{6}$ ways.\n *)\n\ntheorem\nfixes key_permutations :: nat\nassumes h0 : \"key_permutations = card {p. p permutes {1, 2, 3, 4, 5} \\<and> house_key_next_to_car_key p}\"\nshows  \"key_permutations = 6\"\n proof- \n  show ?thesis sledgehammer",
        "informal problem": "There are 5 keys numbered from 1 to 5. The house key and the car key are always placed next to each other. Find the number of possible permutations of the keys that satisfy this condition. The final answer is 6."
    },
    "a_3": {
        "formal problem": "theorem\nfixes key_permutations :: nat\nassumes h0 : \"key_permutations = card {p :: (nat \\<Rightarrow> nat). p permutes {1, 2, 3, 4, 5} \\<and> (\\<exists> i \\<in> {1, 2, 3, 4, 5}. (p i = 1 \\<and> p((i + 1) mod 5) = 2) \\<or> (p i = 2 \\<and> p((i + 1) mod 5) = 1))}\"\nshows  \"key_permutations = 6\"",
        "formal solution": "(* ### Problem\n In how many distinct ways can I arrange my five keys on a keychain, if I want to put my house key next to my car key? Two arrangements are not considered different if the keys are in the same order (or can be made to be in the same order without taking the keys off the chain--that is, by reflection or rotation). The final Answer is 6\n ### Proof\n First, put the house key and car key next to each other on the keychain. It doesn't matter where they are put, because the keychain can be rotated and reflected to move them to any other pair of adjacent locations.\n The remaining three keys can be put on the keychain in $3!=\\boxed{6}$ ways.\n *)\n\ntheorem\nfixes key_permutations :: nat\nassumes h0 : \"key_permutations = card {p :: (nat \\<Rightarrow> nat). p permutes {1, 2, 3, 4, 5} \\<and> (\\<exists> i \\<in> {1, 2, 3, 4, 5}. (p i = 1 \\<and> p((i + 1) mod 5) = 2) \\<or> (p i = 2 \\<and> p((i + 1) mod 5) = 1))}\"\nshows  \"key_permutations = 6\"\n proof- \n  show ?thesis sledgehammer",
        "informal problem": "Find the number of permutations of the set {1, 2, 3, 4, 5} such that either 1 is followed by 2 or 2 is followed by 1. The final answer is 6."
    },
    "a_4": {
        "formal problem": "theorem\nfixes n :: nat and keychain :: \"nat list\"\nassumes h0 : \"length keychain = 5\"\nand h1 : \"distinct keychain\"\nand h2 : \"\\<forall> a b. a \\<noteq> b \\<longrightarrow> (a \\<in> set keychain \\<and> b \\<in> set keychain \\<longrightarrow> List.next keychain a = b \\<or> List.next keychain b = a)\"\nshows  \"card {perms. distinct_permutations keychain perms \\<and> (\\<forall> a b. a \\<noteq> b \\<longrightarrow> (a \\<in> set perms \\<and> b \\<in> set perms \\<longrightarrow> List.next perms a = b \\<or> List.next perms b = a))} = 6\"",
        "formal solution": "(* ### Problem\n In how many distinct ways can I arrange my five keys on a keychain, if I want to put my house key next to my car key? Two arrangements are not considered different if the keys are in the same order (or can be made to be in the same order without taking the keys off the chain--that is, by reflection or rotation). The final Answer is 6\n ### Proof\n First, put the house key and car key next to each other on the keychain. It doesn't matter where they are put, because the keychain can be rotated and reflected to move them to any other pair of adjacent locations.\n The remaining three keys can be put on the keychain in $3!=\\boxed{6}$ ways.\n *)\n\ntheorem\nfixes n :: nat and keychain :: \"nat list\"\nassumes h0 : \"length keychain = 5\"\nand h1 : \"distinct keychain\"\nand h2 : \"\\<forall> a b. a \\<noteq> b \\<longrightarrow> (a \\<in> set keychain \\<and> b \\<in> set keychain \\<longrightarrow> List.next keychain a = b \\<or> List.next keychain b = a)\"\nshows  \"card {perms. distinct_permutations keychain perms \\<and> (\\<forall> a b. a \\<noteq> b \\<longrightarrow> (a \\<in> set perms \\<and> b \\<in> set perms \\<longrightarrow> List.next perms a = b \\<or> List.next perms b = a))} = 6\"\n proof- \n  show ?thesis sledgehammer",
        "informal problem": "You have a keychain with 5 distinct keys on it. Two keys, a and b, are considered adjacent if either a is next to b or b is next to a. Find the number of ways to rearrange the keys on the keychain such that the relative adjacency of the keys is maintained. The final answer is 6."
    },
    "a_5": {
        "formal problem": "theorem\nfixes key_permutations :: nat\nassumes h0 : \"key_permutations = (card {p. p permutes {1..5} \\<and> adjacent (house_key p) (car_key p)})\"\nand h1 : \"\\<forall>p. p permutes {1..5} \\<and> adjacent (house_key p) (car_key p) \\<longrightarrow> (\\<forall>q. q permutes {1..5} \\<and> adjacent (house_key q) (car_key q) \\<longrightarrow> distinct_rotations_or_reflections p q)\"\nshows  \"key_permutations = 6\"",
        "formal solution": "(* ### Problem\n In how many distinct ways can I arrange my five keys on a keychain, if I want to put my house key next to my car key? Two arrangements are not considered different if the keys are in the same order (or can be made to be in the same order without taking the keys off the chain--that is, by reflection or rotation). The final Answer is 6\n ### Proof\n First, put the house key and car key next to each other on the keychain. It doesn't matter where they are put, because the keychain can be rotated and reflected to move them to any other pair of adjacent locations.\n The remaining three keys can be put on the keychain in $3!=\\boxed{6}$ ways.\n *)\n\ntheorem\nfixes key_permutations :: nat\nassumes h0 : \"key_permutations = (card {p. p permutes {1..5} \\<and> adjacent (house_key p) (car_key p)})\"\nand h1 : \"\\<forall>p. p permutes {1..5} \\<and> adjacent (house_key p) (car_key p) \\<longrightarrow> (\\<forall>q. q permutes {1..5} \\<and> adjacent (house_key q) (car_key q) \\<longrightarrow> distinct_rotations_or_reflections p q)\"\nshows  \"key_permutations = 6\"\n proof- \n  show ?thesis sledgehammer",
        "informal problem": "You have a set of 5 keys, each with a unique house key and car key. The keys are arranged such that the house key is adjacent to the car key on the key ring. You want to know the number of distinct key permutations where the house key and car key are adjacent. The final answer is 6."
    },
    "a_6": {
        "formal problem": "theorem\nfixes key_permutations :: nat\nassumes h0 : \"key_permutations = (card {p. p permutes {1..5} \\<and> adjacent (p, 1, 2)})\"\nand h1 : \"bij_betw (\\<lambda>p. (if p 1 = 1 \\<and> p 2 = 2 then p else inv p)) {p. p permutes {1..5} \\<and> adjacent (p, 1, 2)} {p. p permutes {1..5} \\<and> adjacent (p, 1, 2)}\"\nand h2 : \"adjacent (p, x, y) \\<longleftrightarrow> (\\<exists>i\\<in>{1..5}. p i = x \\<and> p ((i + 1) mod 5) = y \\<or> p i = y \\<and> p ((i + 1) mod 5) = x)\"\nshows  \"key_permutations = 6\"",
        "formal solution": "(* ### Problem\n In how many distinct ways can I arrange my five keys on a keychain, if I want to put my house key next to my car key? Two arrangements are not considered different if the keys are in the same order (or can be made to be in the same order without taking the keys off the chain--that is, by reflection or rotation). The final Answer is 6\n ### Proof\n First, put the house key and car key next to each other on the keychain. It doesn't matter where they are put, because the keychain can be rotated and reflected to move them to any other pair of adjacent locations.\n The remaining three keys can be put on the keychain in $3!=\\boxed{6}$ ways.\n *)\n\ntheorem\nfixes key_permutations :: nat\nassumes h0 : \"key_permutations = (card {p. p permutes {1..5} \\<and> adjacent (p, 1, 2)})\"\nand h1 : \"bij_betw (\\<lambda>p. (if p 1 = 1 \\<and> p 2 = 2 then p else inv p)) {p. p permutes {1..5} \\<and> adjacent (p, 1, 2)} {p. p permutes {1..5} \\<and> adjacent (p, 1, 2)}\"\nand h2 : \"adjacent (p, x, y) \\<longleftrightarrow> (\\<exists>i\\<in>{1..5}. p i = x \\<and> p ((i + 1) mod 5) = y \\<or> p i = y \\<and> p ((i + 1) mod 5) = x)\"\nshows  \"key_permutations = 6\"\n proof- \n  show ?thesis sledgehammer",
        "informal problem": "How many distinct permutations of the numbers 1 to 5 have the numbers 1 and 2 as adjacent elements? The final answer is 6."
    },
    "a_7": {
        "formal problem": "theorem\nfixes n :: nat\nassumes h0 : \"n = 5\"\nand h1 : \"distinct_ways n = (\\<lambda>n. if n = 0 then 1 else n * (n - 1) div 2) (n - 1)\"\nshows  \"distinct_ways 5 = 6\"",
        "formal solution": "(* ### Problem\n In how many distinct ways can I arrange my five keys on a keychain, if I want to put my house key next to my car key? Two arrangements are not considered different if the keys are in the same order (or can be made to be in the same order without taking the keys off the chain--that is, by reflection or rotation). The final Answer is 6\n ### Proof\n First, put the house key and car key next to each other on the keychain. It doesn't matter where they are put, because the keychain can be rotated and reflected to move them to any other pair of adjacent locations.\n The remaining three keys can be put on the keychain in $3!=\\boxed{6}$ ways.\n *)\n\ntheorem\nfixes n :: nat\nassumes h0 : \"n = 5\"\nand h1 : \"distinct_ways n = (\\<lambda>n. if n = 0 then 1 else n * (n - 1) div 2) (n - 1)\"\nshows  \"distinct_ways 5 = 6\"\n proof- \n  show ?thesis sledgehammer",
        "informal problem": "Find the number of distinct pairs that can be formed from a set of 5 elements. The final answer is 6."
    },
    "a_8": {
        "formal problem": "theorem\nfixes keychain_arrangements :: nat\nassumes h0 : \"keychain_arrangements = (\\<lambda>n. (n-1) * (n-2)). 5\"\nshows  \"keychain_arrangements = 6\"",
        "formal solution": "(* ### Problem\n In how many distinct ways can I arrange my five keys on a keychain, if I want to put my house key next to my car key? Two arrangements are not considered different if the keys are in the same order (or can be made to be in the same order without taking the keys off the chain--that is, by reflection or rotation). The final Answer is 6\n ### Proof\n First, put the house key and car key next to each other on the keychain. It doesn't matter where they are put, because the keychain can be rotated and reflected to move them to any other pair of adjacent locations.\n The remaining three keys can be put on the keychain in $3!=\\boxed{6}$ ways.\n *)\n\ntheorem\nfixes keychain_arrangements :: nat\nassumes h0 : \"keychain_arrangements = (\\<lambda>n. (n-1) * (n-2)). 5\"\nshows  \"keychain_arrangements = 6\"\n proof- \n  show ?thesis sledgehammer",
        "informal problem": "How many different ways can you arrange 5 keychains in a row such that no two keychains are the same? Use the formula $(n-1)(n-2)$ to calculate the number of arrangements. The final answer is 6."
    },
    "a_9": {
        "formal problem": "theorem\nfixes key_permutations :: nat\nassumes h0 : \"key_permutations = (card {P :: (nat \\<Rightarrow> nat) . bij P \\<and> P ` {1..5} = {1..5} \\<and> (P 1 = 1 \\<and> P 2 = 2 \\<or> P 2 = 1 \\<and> P 3 = 2)}) div 2\"\nshows  \"key_permutations = 6\"",
        "formal solution": "(* ### Problem\n In how many distinct ways can I arrange my five keys on a keychain, if I want to put my house key next to my car key? Two arrangements are not considered different if the keys are in the same order (or can be made to be in the same order without taking the keys off the chain--that is, by reflection or rotation). The final Answer is 6\n ### Proof\n First, put the house key and car key next to each other on the keychain. It doesn't matter where they are put, because the keychain can be rotated and reflected to move them to any other pair of adjacent locations.\n The remaining three keys can be put on the keychain in $3!=\\boxed{6}$ ways.\n *)\n\ntheorem\nfixes key_permutations :: nat\nassumes h0 : \"key_permutations = (card {P :: (nat \\<Rightarrow> nat) . bij P \\<and> P ` {1..5} = {1..5} \\<and> (P 1 = 1 \\<and> P 2 = 2 \\<or> P 2 = 1 \\<and> P 3 = 2)}) div 2\"\nshows  \"key_permutations = 6\"\n proof- \n  show ?thesis sledgehammer",
        "informal problem": "Find the number of distinct key permutations for a lock with 5 keys, where each key can only open one lock and the first key must open the first lock or the second key must open the second lock. The final answer is 6."
    },
    "level": "Level 4",
    "type": "Counting & Probability"
}