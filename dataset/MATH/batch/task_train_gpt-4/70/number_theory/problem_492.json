{
    "natural problem": "To transmit a positive integer less than 1000, the Networked Number Node offers two options.\n\nOption 1. Pay $\\$$d to send each digit d. Therefore, 987 would cost $\\$$9 + $\\$$8 + $\\$$7 = $\\$$24 to transmit.\n\nOption 2. Encode integer into binary (base 2) first, and then pay $\\$$d to send each digit d. Therefore, 987 becomes 1111011011 and would cost $\\$$1 + $\\$$1 + $\\$$1 + $\\$$1 + $\\$$0 + $\\$$1 + $\\$$1 + $\\$$0 + $\\$$1 + $\\$$1 = $\\$$8.\n\nWhat is the largest integer less than 1000 that costs the same whether using Option 1 or Option 2?",
    "natural solution": [
        "First, we need to find the largest possible value when sending a number with Option 2. If we had 10 1s the smallest binary number would be: $$1111111111_2=1023$$ This is greater than 1000, so the greatest possible cost when sending with option 2 will be 9.",
        "We can look at the largest numbers less than 1000 which cost 9 with Option 1 and see if they cost 9 with option 2. The largest numbers are: $$900,810,801,720,711,702,...$$ The smallest possible number with 10 digits and cost 9 in Option 2 is: $$1011111111_2=767$$ Below this, we would have: $$111111111_2=511$$ which doesn't work.",
        "We can quickly check the numbers above and see that they cost less than 9 with method 2.",
        "So, we now need to consider numbers with cost of 8. The largest numbers with a cost of 8 in Option 1 are: $$800,710,701,620,611,602,530,521,512,503,...$$ It is possible to check these in base 2 and see which is the first to cost 8 with Option 2, or we can go the other way and look at numbers with a cost of 8 in Option 2.",
        "Either way, we will find the largest possible integer with a cost of 8 is: $$111110111_2 = 503$$ We must check and make sure that there are no numbers larger than $503$ with an Option 2 cost lower than 8.",
        "The numbers with cost 7 in Option 1 with value greater than $503$ are $700$, $610$, $601$, and $520$.",
        "We can check that all cost less than 7 in Option 2 and can be eliminated. The numbers with cost 6 in Option 1 with value greater than $503$ are $600$ and $510$, neither of which have cost 6 in Option 2 and therefore do not work.",
        "Since a number with cost 5 or lower must be less than 500, the largest possible integer is $\\boxed{503}$."
    ],
    "natural answer": "503",
    "a_0": {
        "formal problem": "theorem\nfixes n :: nat\nassumes h0 : \"n < 1000\"\nand h1 : \"cost_option1 n = cost_option2 n\"\nshows  \"n = 503\"\n\nwhere\n  \"cost_option1 n = sum_list (map (\\<lambda>digit. nat_of_char digit - nat_of_char '0') (show n))\"\n  \"cost_option2 n = length (filter (\\<lambda>digit. digit = '1') (int_to_bin_string n))\"",
        "formal solution": "(* ### Problem\n To transmit a positive integer less than 1000, the Networked Number Node offers two options.\n\nOption 1. Pay $\\$$d to send each digit d. Therefore, 987 would cost $\\$$9 + $\\$$8 + $\\$$7 = $\\$$24 to transmit.\n\nOption 2. Encode integer into binary (base 2) first, and then pay $\\$$d to send each digit d. Therefore, 987 becomes 1111011011 and would cost $\\$$1 + $\\$$1 + $\\$$1 + $\\$$1 + $\\$$0 + $\\$$1 + $\\$$1 + $\\$$0 + $\\$$1 + $\\$$1 = $\\$$8.\n\nWhat is the largest integer less than 1000 that costs the same whether using Option 1 or Option 2? The final Answer is 503\n ### Proof\n First, we need to find the largest possible value when sending a number with Option 2. If we had 10 1s the smallest binary number would be: $$1111111111_2=1023$$ This is greater than 1000, so the greatest possible cost when sending with option 2 will be 9.\n We can look at the largest numbers less than 1000 which cost 9 with Option 1 and see if they cost 9 with option 2. The largest numbers are: $$900,810,801,720,711,702,...$$ The smallest possible number with 10 digits and cost 9 in Option 2 is: $$1011111111_2=767$$ Below this, we would have: $$111111111_2=511$$ which doesn't work.\n We can quickly check the numbers above and see that they cost less than 9 with method 2.\n So, we now need to consider numbers with cost of 8. The largest numbers with a cost of 8 in Option 1 are: $$800,710,701,620,611,602,530,521,512,503,...$$ It is possible to check these in base 2 and see which is the first to cost 8 with Option 2, or we can go the other way and look at numbers with a cost of 8 in Option 2.\n Either way, we will find the largest possible integer with a cost of 8 is: $$111110111_2 = 503$$ We must check and make sure that there are no numbers larger than $503$ with an Option 2 cost lower than 8.\n The numbers with cost 7 in Option 1 with value greater than $503$ are $700$, $610$, $601$, and $520$.\n We can check that all cost less than 7 in Option 2 and can be eliminated. The numbers with cost 6 in Option 1 with value greater than $503$ are $600$ and $510$, neither of which have cost 6 in Option 2 and therefore do not work.\n Since a number with cost 5 or lower must be less than 500, the largest possible integer is $\\boxed{503}$.\n *)\n\ntheorem\nfixes n :: nat\nassumes h0 : \"n < 1000\"\nand h1 : \"cost_option1 n = cost_option2 n\"\nshows  \"n = 503\"\n\nwhere\n  \"cost_option1 n = sum_list (map (\\<lambda>digit. nat_of_char digit - nat_of_char '0') (show n))\"\n  \"cost_option2 n = length (filter (\\<lambda>digit. digit = '1') (int_to_bin_string n))\"\n proof- \n  show ?thesis sledgehammer",
        "informal problem": "There are two cost options for a natural number less than 1000. \n\nThe first option calculates the cost as the sum of the digits of the number. \n\nThe second option calculates the cost as the number of '1's in the binary representation of the number. \n\nFind the number where the cost of the two options is equal. The final answer is 503."
    },
    "a_1": {
        "formal problem": "theorem\nfixes d1 d2 :: \"nat \\<Rightarrow> nat\"\nassumes h0 : \"\\<forall> n. n < 1000 \\<longrightarrow> d1 n = (\\<Sum>d\\<leftarrow>digits 10 n. d)\"\nand h1 : \"\\<forall> n. n < 1000 \\<longrightarrow> d2 n = (\\<Sum>d\\<leftarrow>digits 2 n. d)\"\nshows  \"\\<exists> n. n < 1000 \\<and> d1 n = d2 n \\<and> (\\<forall> m < 1000. d1 m = d2 m \\<longrightarrow> m \\<le> n)\"",
        "formal solution": "(* ### Problem\n To transmit a positive integer less than 1000, the Networked Number Node offers two options.\n\nOption 1. Pay $\\$$d to send each digit d. Therefore, 987 would cost $\\$$9 + $\\$$8 + $\\$$7 = $\\$$24 to transmit.\n\nOption 2. Encode integer into binary (base 2) first, and then pay $\\$$d to send each digit d. Therefore, 987 becomes 1111011011 and would cost $\\$$1 + $\\$$1 + $\\$$1 + $\\$$1 + $\\$$0 + $\\$$1 + $\\$$1 + $\\$$0 + $\\$$1 + $\\$$1 = $\\$$8.\n\nWhat is the largest integer less than 1000 that costs the same whether using Option 1 or Option 2? The final Answer is 503\n ### Proof\n First, we need to find the largest possible value when sending a number with Option 2. If we had 10 1s the smallest binary number would be: $$1111111111_2=1023$$ This is greater than 1000, so the greatest possible cost when sending with option 2 will be 9.\n We can look at the largest numbers less than 1000 which cost 9 with Option 1 and see if they cost 9 with option 2. The largest numbers are: $$900,810,801,720,711,702,...$$ The smallest possible number with 10 digits and cost 9 in Option 2 is: $$1011111111_2=767$$ Below this, we would have: $$111111111_2=511$$ which doesn't work.\n We can quickly check the numbers above and see that they cost less than 9 with method 2.\n So, we now need to consider numbers with cost of 8. The largest numbers with a cost of 8 in Option 1 are: $$800,710,701,620,611,602,530,521,512,503,...$$ It is possible to check these in base 2 and see which is the first to cost 8 with Option 2, or we can go the other way and look at numbers with a cost of 8 in Option 2.\n Either way, we will find the largest possible integer with a cost of 8 is: $$111110111_2 = 503$$ We must check and make sure that there are no numbers larger than $503$ with an Option 2 cost lower than 8.\n The numbers with cost 7 in Option 1 with value greater than $503$ are $700$, $610$, $601$, and $520$.\n We can check that all cost less than 7 in Option 2 and can be eliminated. The numbers with cost 6 in Option 1 with value greater than $503$ are $600$ and $510$, neither of which have cost 6 in Option 2 and therefore do not work.\n Since a number with cost 5 or lower must be less than 500, the largest possible integer is $\\boxed{503}$.\n *)\n\ntheorem\nfixes d1 d2 :: \"nat \\<Rightarrow> nat\"\nassumes h0 : \"\\<forall> n. n < 1000 \\<longrightarrow> d1 n = (\\<Sum>d\\<leftarrow>digits 10 n. d)\"\nand h1 : \"\\<forall> n. n < 1000 \\<longrightarrow> d2 n = (\\<Sum>d\\<leftarrow>digits 2 n. d)\"\nshows  \"\\<exists> n. n < 1000 \\<and> d1 n = d2 n \\<and> (\\<forall> m < 1000. d1 m = d2 m \\<longrightarrow> m \\<le> n)\"\n proof- \n  show ?thesis sledgehammer",
        "informal problem": "Find the largest number less than 1000 such that the sum of its decimal digits is equal to the sum of its binary digits."
    },
    "a_2": {
        "formal problem": "theorem\nfixes n :: nat\nassumes h0 : \"n < 1000\"\nand h1 : \"(\\<Sum>d\\<leftarrow>digits (int n). d) = (\\<Sum>d\\<leftarrow>digits (int (bin_of_nat n)). d)\"\nshows  \"n = 503\"",
        "formal solution": "(* ### Problem\n To transmit a positive integer less than 1000, the Networked Number Node offers two options.\n\nOption 1. Pay $\\$$d to send each digit d. Therefore, 987 would cost $\\$$9 + $\\$$8 + $\\$$7 = $\\$$24 to transmit.\n\nOption 2. Encode integer into binary (base 2) first, and then pay $\\$$d to send each digit d. Therefore, 987 becomes 1111011011 and would cost $\\$$1 + $\\$$1 + $\\$$1 + $\\$$1 + $\\$$0 + $\\$$1 + $\\$$1 + $\\$$0 + $\\$$1 + $\\$$1 = $\\$$8.\n\nWhat is the largest integer less than 1000 that costs the same whether using Option 1 or Option 2? The final Answer is 503\n ### Proof\n First, we need to find the largest possible value when sending a number with Option 2. If we had 10 1s the smallest binary number would be: $$1111111111_2=1023$$ This is greater than 1000, so the greatest possible cost when sending with option 2 will be 9.\n We can look at the largest numbers less than 1000 which cost 9 with Option 1 and see if they cost 9 with option 2. The largest numbers are: $$900,810,801,720,711,702,...$$ The smallest possible number with 10 digits and cost 9 in Option 2 is: $$1011111111_2=767$$ Below this, we would have: $$111111111_2=511$$ which doesn't work.\n We can quickly check the numbers above and see that they cost less than 9 with method 2.\n So, we now need to consider numbers with cost of 8. The largest numbers with a cost of 8 in Option 1 are: $$800,710,701,620,611,602,530,521,512,503,...$$ It is possible to check these in base 2 and see which is the first to cost 8 with Option 2, or we can go the other way and look at numbers with a cost of 8 in Option 2.\n Either way, we will find the largest possible integer with a cost of 8 is: $$111110111_2 = 503$$ We must check and make sure that there are no numbers larger than $503$ with an Option 2 cost lower than 8.\n The numbers with cost 7 in Option 1 with value greater than $503$ are $700$, $610$, $601$, and $520$.\n We can check that all cost less than 7 in Option 2 and can be eliminated. The numbers with cost 6 in Option 1 with value greater than $503$ are $600$ and $510$, neither of which have cost 6 in Option 2 and therefore do not work.\n Since a number with cost 5 or lower must be less than 500, the largest possible integer is $\\boxed{503}$.\n *)\n\ntheorem\nfixes n :: nat\nassumes h0 : \"n < 1000\"\nand h1 : \"(\\<Sum>d\\<leftarrow>digits (int n). d) = (\\<Sum>d\\<leftarrow>digits (int (bin_of_nat n)). d)\"\nshows  \"n = 503\"\n proof- \n  show ?thesis sledgehammer",
        "informal problem": "Find a natural number less than 1000 such that the sum of its decimal digits is equal to the sum of the digits in its binary representation. The final answer is 503."
    },
    "a_3": {
        "formal problem": "theorem\nfixes n :: nat\nassumes h0 : \"n < 1000\"\nand h1 : \"sum_digits n = sum_digits (bin_of_nat n)\"\nshows  \"n = 503\" \n\nwhere\n\"sum_digits n = (if n = 0 then 0 else (n mod 10) + sum_digits (n div 10))\"\nand \"bin_of_nat n = (if n = 0 then 0 else (n mod 2) + 10 * bin_of_nat (n div 2))\"",
        "formal solution": "(* ### Problem\n To transmit a positive integer less than 1000, the Networked Number Node offers two options.\n\nOption 1. Pay $\\$$d to send each digit d. Therefore, 987 would cost $\\$$9 + $\\$$8 + $\\$$7 = $\\$$24 to transmit.\n\nOption 2. Encode integer into binary (base 2) first, and then pay $\\$$d to send each digit d. Therefore, 987 becomes 1111011011 and would cost $\\$$1 + $\\$$1 + $\\$$1 + $\\$$1 + $\\$$0 + $\\$$1 + $\\$$1 + $\\$$0 + $\\$$1 + $\\$$1 = $\\$$8.\n\nWhat is the largest integer less than 1000 that costs the same whether using Option 1 or Option 2? The final Answer is 503\n ### Proof\n First, we need to find the largest possible value when sending a number with Option 2. If we had 10 1s the smallest binary number would be: $$1111111111_2=1023$$ This is greater than 1000, so the greatest possible cost when sending with option 2 will be 9.\n We can look at the largest numbers less than 1000 which cost 9 with Option 1 and see if they cost 9 with option 2. The largest numbers are: $$900,810,801,720,711,702,...$$ The smallest possible number with 10 digits and cost 9 in Option 2 is: $$1011111111_2=767$$ Below this, we would have: $$111111111_2=511$$ which doesn't work.\n We can quickly check the numbers above and see that they cost less than 9 with method 2.\n So, we now need to consider numbers with cost of 8. The largest numbers with a cost of 8 in Option 1 are: $$800,710,701,620,611,602,530,521,512,503,...$$ It is possible to check these in base 2 and see which is the first to cost 8 with Option 2, or we can go the other way and look at numbers with a cost of 8 in Option 2.\n Either way, we will find the largest possible integer with a cost of 8 is: $$111110111_2 = 503$$ We must check and make sure that there are no numbers larger than $503$ with an Option 2 cost lower than 8.\n The numbers with cost 7 in Option 1 with value greater than $503$ are $700$, $610$, $601$, and $520$.\n We can check that all cost less than 7 in Option 2 and can be eliminated. The numbers with cost 6 in Option 1 with value greater than $503$ are $600$ and $510$, neither of which have cost 6 in Option 2 and therefore do not work.\n Since a number with cost 5 or lower must be less than 500, the largest possible integer is $\\boxed{503}$.\n *)\n\ntheorem\nfixes n :: nat\nassumes h0 : \"n < 1000\"\nand h1 : \"sum_digits n = sum_digits (bin_of_nat n)\"\nshows  \"n = 503\" \n\nwhere\n\"sum_digits n = (if n = 0 then 0 else (n mod 10) + sum_digits (n div 10))\"\nand \"bin_of_nat n = (if n = 0 then 0 else (n mod 2) + 10 * bin_of_nat (n div 2))\"\n proof- \n  show ?thesis sledgehammer",
        "informal problem": "Find a natural number less than 1000 such that the sum of its decimal digits is equal to the sum of its binary digits. The final answer is 503."
    },
    "a_4": {
        "formal problem": "theorem\nfixes x :: nat and cost_option_1 cost_option_2 :: \"nat \\<Rightarrow> nat\"\nassumes h0 : \"x < 1000\"\nand h1 : \"\\<forall> x. cost_option_1 x = sum (\\<lambda>d. d) (digits 10 x)\"\nand h2 : \"\\<forall> x. cost_option_2 x = sum (\\<lambda>d. d) (digits 2 x)\"\nshows  \"GREATEST x. cost_option_1 x = cost_option_2 x = 503\"",
        "formal solution": "(* ### Problem\n To transmit a positive integer less than 1000, the Networked Number Node offers two options.\n\nOption 1. Pay $\\$$d to send each digit d. Therefore, 987 would cost $\\$$9 + $\\$$8 + $\\$$7 = $\\$$24 to transmit.\n\nOption 2. Encode integer into binary (base 2) first, and then pay $\\$$d to send each digit d. Therefore, 987 becomes 1111011011 and would cost $\\$$1 + $\\$$1 + $\\$$1 + $\\$$1 + $\\$$0 + $\\$$1 + $\\$$1 + $\\$$0 + $\\$$1 + $\\$$1 = $\\$$8.\n\nWhat is the largest integer less than 1000 that costs the same whether using Option 1 or Option 2? The final Answer is 503\n ### Proof\n First, we need to find the largest possible value when sending a number with Option 2. If we had 10 1s the smallest binary number would be: $$1111111111_2=1023$$ This is greater than 1000, so the greatest possible cost when sending with option 2 will be 9.\n We can look at the largest numbers less than 1000 which cost 9 with Option 1 and see if they cost 9 with option 2. The largest numbers are: $$900,810,801,720,711,702,...$$ The smallest possible number with 10 digits and cost 9 in Option 2 is: $$1011111111_2=767$$ Below this, we would have: $$111111111_2=511$$ which doesn't work.\n We can quickly check the numbers above and see that they cost less than 9 with method 2.\n So, we now need to consider numbers with cost of 8. The largest numbers with a cost of 8 in Option 1 are: $$800,710,701,620,611,602,530,521,512,503,...$$ It is possible to check these in base 2 and see which is the first to cost 8 with Option 2, or we can go the other way and look at numbers with a cost of 8 in Option 2.\n Either way, we will find the largest possible integer with a cost of 8 is: $$111110111_2 = 503$$ We must check and make sure that there are no numbers larger than $503$ with an Option 2 cost lower than 8.\n The numbers with cost 7 in Option 1 with value greater than $503$ are $700$, $610$, $601$, and $520$.\n We can check that all cost less than 7 in Option 2 and can be eliminated. The numbers with cost 6 in Option 1 with value greater than $503$ are $600$ and $510$, neither of which have cost 6 in Option 2 and therefore do not work.\n Since a number with cost 5 or lower must be less than 500, the largest possible integer is $\\boxed{503}$.\n *)\n\ntheorem\nfixes x :: nat and cost_option_1 cost_option_2 :: \"nat \\<Rightarrow> nat\"\nassumes h0 : \"x < 1000\"\nand h1 : \"\\<forall> x. cost_option_1 x = sum (\\<lambda>d. d) (digits 10 x)\"\nand h2 : \"\\<forall> x. cost_option_2 x = sum (\\<lambda>d. d) (digits 2 x)\"\nshows  \"GREATEST x. cost_option_1 x = cost_option_2 x = 503\"\n proof- \n  show ?thesis sledgehammer",
        "informal problem": "Given two cost options:\n- Cost option 1: The cost for a natural number $x$ is the sum of its decimal digits.\n- Cost option 2: The cost for a natural number $x$ is the sum of its binary digits.\n\nFind the greatest natural number $x$ less than 1000 for which the cost under option 1 is equal to the cost under option 2. The final answer is 503."
    },
    "a_5": {
        "formal problem": "theorem\nfixes i :: int\nassumes h0 : \"i < 1000\"\nand h1 : \"i \\<ge> 0\"\nand h2 : \"sum_list (map (\\<lambda>d. if d = 1 then 1 else 0) (digits 2 i)) = sum_list (map (\\<lambda>d. if d = 1 then 1 else 0) (digits 10 i))\"\nshows  \"i = 503\"",
        "formal solution": "(* ### Problem\n To transmit a positive integer less than 1000, the Networked Number Node offers two options.\n\nOption 1. Pay $\\$$d to send each digit d. Therefore, 987 would cost $\\$$9 + $\\$$8 + $\\$$7 = $\\$$24 to transmit.\n\nOption 2. Encode integer into binary (base 2) first, and then pay $\\$$d to send each digit d. Therefore, 987 becomes 1111011011 and would cost $\\$$1 + $\\$$1 + $\\$$1 + $\\$$1 + $\\$$0 + $\\$$1 + $\\$$1 + $\\$$0 + $\\$$1 + $\\$$1 = $\\$$8.\n\nWhat is the largest integer less than 1000 that costs the same whether using Option 1 or Option 2? The final Answer is 503\n ### Proof\n First, we need to find the largest possible value when sending a number with Option 2. If we had 10 1s the smallest binary number would be: $$1111111111_2=1023$$ This is greater than 1000, so the greatest possible cost when sending with option 2 will be 9.\n We can look at the largest numbers less than 1000 which cost 9 with Option 1 and see if they cost 9 with option 2. The largest numbers are: $$900,810,801,720,711,702,...$$ The smallest possible number with 10 digits and cost 9 in Option 2 is: $$1011111111_2=767$$ Below this, we would have: $$111111111_2=511$$ which doesn't work.\n We can quickly check the numbers above and see that they cost less than 9 with method 2.\n So, we now need to consider numbers with cost of 8. The largest numbers with a cost of 8 in Option 1 are: $$800,710,701,620,611,602,530,521,512,503,...$$ It is possible to check these in base 2 and see which is the first to cost 8 with Option 2, or we can go the other way and look at numbers with a cost of 8 in Option 2.\n Either way, we will find the largest possible integer with a cost of 8 is: $$111110111_2 = 503$$ We must check and make sure that there are no numbers larger than $503$ with an Option 2 cost lower than 8.\n The numbers with cost 7 in Option 1 with value greater than $503$ are $700$, $610$, $601$, and $520$.\n We can check that all cost less than 7 in Option 2 and can be eliminated. The numbers with cost 6 in Option 1 with value greater than $503$ are $600$ and $510$, neither of which have cost 6 in Option 2 and therefore do not work.\n Since a number with cost 5 or lower must be less than 500, the largest possible integer is $\\boxed{503}$.\n *)\n\ntheorem\nfixes i :: int\nassumes h0 : \"i < 1000\"\nand h1 : \"i \\<ge> 0\"\nand h2 : \"sum_list (map (\\<lambda>d. if d = 1 then 1 else 0) (digits 2 i)) = sum_list (map (\\<lambda>d. if d = 1 then 1 else 0) (digits 10 i))\"\nshows  \"i = 503\"\n proof- \n  show ?thesis sledgehammer",
        "informal problem": "Find an integer $i$ between 0 and 1000 such that the sum of the 1's in its binary representation equals the sum of the 1's in its decimal representation. The final answer is $i = 503$."
    },
    "a_6": {
        "formal problem": "theorem\nfixes n :: nat and cost1 cost2 :: \"nat \\<Rightarrow> nat\"\nassumes h0 : \"n < 1000\"\nand h1 : \"\\<forall> n. cost1 n = sum_list (map (\\<lambda>d. if d = 1 then 1 else 0) (nat_to_digit_list n))\"\nand h2 : \"\\<forall> n. cost2 n = sum_list (map (\\<lambda>d. if d = 1 then 1 else 0) (nat_to_bin_digit_list n))\"\nshows  \"Max {n. cost1 n = cost2 n} = 503\"",
        "formal solution": "(* ### Problem\n To transmit a positive integer less than 1000, the Networked Number Node offers two options.\n\nOption 1. Pay $\\$$d to send each digit d. Therefore, 987 would cost $\\$$9 + $\\$$8 + $\\$$7 = $\\$$24 to transmit.\n\nOption 2. Encode integer into binary (base 2) first, and then pay $\\$$d to send each digit d. Therefore, 987 becomes 1111011011 and would cost $\\$$1 + $\\$$1 + $\\$$1 + $\\$$1 + $\\$$0 + $\\$$1 + $\\$$1 + $\\$$0 + $\\$$1 + $\\$$1 = $\\$$8.\n\nWhat is the largest integer less than 1000 that costs the same whether using Option 1 or Option 2? The final Answer is 503\n ### Proof\n First, we need to find the largest possible value when sending a number with Option 2. If we had 10 1s the smallest binary number would be: $$1111111111_2=1023$$ This is greater than 1000, so the greatest possible cost when sending with option 2 will be 9.\n We can look at the largest numbers less than 1000 which cost 9 with Option 1 and see if they cost 9 with option 2. The largest numbers are: $$900,810,801,720,711,702,...$$ The smallest possible number with 10 digits and cost 9 in Option 2 is: $$1011111111_2=767$$ Below this, we would have: $$111111111_2=511$$ which doesn't work.\n We can quickly check the numbers above and see that they cost less than 9 with method 2.\n So, we now need to consider numbers with cost of 8. The largest numbers with a cost of 8 in Option 1 are: $$800,710,701,620,611,602,530,521,512,503,...$$ It is possible to check these in base 2 and see which is the first to cost 8 with Option 2, or we can go the other way and look at numbers with a cost of 8 in Option 2.\n Either way, we will find the largest possible integer with a cost of 8 is: $$111110111_2 = 503$$ We must check and make sure that there are no numbers larger than $503$ with an Option 2 cost lower than 8.\n The numbers with cost 7 in Option 1 with value greater than $503$ are $700$, $610$, $601$, and $520$.\n We can check that all cost less than 7 in Option 2 and can be eliminated. The numbers with cost 6 in Option 1 with value greater than $503$ are $600$ and $510$, neither of which have cost 6 in Option 2 and therefore do not work.\n Since a number with cost 5 or lower must be less than 500, the largest possible integer is $\\boxed{503}$.\n *)\n\ntheorem\nfixes n :: nat and cost1 cost2 :: \"nat \\<Rightarrow> nat\"\nassumes h0 : \"n < 1000\"\nand h1 : \"\\<forall> n. cost1 n = sum_list (map (\\<lambda>d. if d = 1 then 1 else 0) (nat_to_digit_list n))\"\nand h2 : \"\\<forall> n. cost2 n = sum_list (map (\\<lambda>d. if d = 1 then 1 else 0) (nat_to_bin_digit_list n))\"\nshows  \"Max {n. cost1 n = cost2 n} = 503\"\n proof- \n  show ?thesis sledgehammer",
        "informal problem": "For any natural number $n$ less than 1000, let $cost1(n)$ be the number of 1s in the decimal representation of $n$ and $cost2(n)$ be the number of 1s in the binary representation of $n$. What is the largest $n$ for which $cost1(n) = cost2(n)$? The final answer is 503."
    },
    "a_7": {
        "formal problem": "theorem\nfixes n :: nat\nassumes h0 : \"n < 1000\"\nand h1 : \"cost_base_10 n = cost_base_2 n\"\nshows  \"n = 503\"\n\nwhere \"cost_base_10 n = sum_list (digits 10 n)\"\nand \"cost_base_2 n = sum_list (digits 2 n)\"\nand \"digits b n = if n < b then [n] else n mod b # digits b (n div b)\"",
        "formal solution": "(* ### Problem\n To transmit a positive integer less than 1000, the Networked Number Node offers two options.\n\nOption 1. Pay $\\$$d to send each digit d. Therefore, 987 would cost $\\$$9 + $\\$$8 + $\\$$7 = $\\$$24 to transmit.\n\nOption 2. Encode integer into binary (base 2) first, and then pay $\\$$d to send each digit d. Therefore, 987 becomes 1111011011 and would cost $\\$$1 + $\\$$1 + $\\$$1 + $\\$$1 + $\\$$0 + $\\$$1 + $\\$$1 + $\\$$0 + $\\$$1 + $\\$$1 = $\\$$8.\n\nWhat is the largest integer less than 1000 that costs the same whether using Option 1 or Option 2? The final Answer is 503\n ### Proof\n First, we need to find the largest possible value when sending a number with Option 2. If we had 10 1s the smallest binary number would be: $$1111111111_2=1023$$ This is greater than 1000, so the greatest possible cost when sending with option 2 will be 9.\n We can look at the largest numbers less than 1000 which cost 9 with Option 1 and see if they cost 9 with option 2. The largest numbers are: $$900,810,801,720,711,702,...$$ The smallest possible number with 10 digits and cost 9 in Option 2 is: $$1011111111_2=767$$ Below this, we would have: $$111111111_2=511$$ which doesn't work.\n We can quickly check the numbers above and see that they cost less than 9 with method 2.\n So, we now need to consider numbers with cost of 8. The largest numbers with a cost of 8 in Option 1 are: $$800,710,701,620,611,602,530,521,512,503,...$$ It is possible to check these in base 2 and see which is the first to cost 8 with Option 2, or we can go the other way and look at numbers with a cost of 8 in Option 2.\n Either way, we will find the largest possible integer with a cost of 8 is: $$111110111_2 = 503$$ We must check and make sure that there are no numbers larger than $503$ with an Option 2 cost lower than 8.\n The numbers with cost 7 in Option 1 with value greater than $503$ are $700$, $610$, $601$, and $520$.\n We can check that all cost less than 7 in Option 2 and can be eliminated. The numbers with cost 6 in Option 1 with value greater than $503$ are $600$ and $510$, neither of which have cost 6 in Option 2 and therefore do not work.\n Since a number with cost 5 or lower must be less than 500, the largest possible integer is $\\boxed{503}$.\n *)\n\ntheorem\nfixes n :: nat\nassumes h0 : \"n < 1000\"\nand h1 : \"cost_base_10 n = cost_base_2 n\"\nshows  \"n = 503\"\n\nwhere \"cost_base_10 n = sum_list (digits 10 n)\"\nand \"cost_base_2 n = sum_list (digits 2 n)\"\nand \"digits b n = if n < b then [n] else n mod b # digits b (n div b)\"\n proof- \n  show ?thesis sledgehammer",
        "informal problem": "Find a natural number less than 1000 such that the sum of its digits in base 10 is equal to the sum of its digits in base 2. The answer is 503."
    },
    "a_8": {
        "formal problem": "theorem\nfixes n :: nat and cost1 cost2 :: \"nat \\<Rightarrow> nat\"\nassumes h0 : \"n < 1000\"\nand h1 : \"\\<forall> d. cost1 (n div 10^d mod 10) = d\"\nand h2 : \"\\<forall> d. cost2 ((n div 2^d mod 2) * (2 ^ (n div 2 ^ d mod 2))) = d\"\nshows  \"Max {n. cost1 n = cost2 n} = 503\"",
        "formal solution": "(* ### Problem\n To transmit a positive integer less than 1000, the Networked Number Node offers two options.\n\nOption 1. Pay $\\$$d to send each digit d. Therefore, 987 would cost $\\$$9 + $\\$$8 + $\\$$7 = $\\$$24 to transmit.\n\nOption 2. Encode integer into binary (base 2) first, and then pay $\\$$d to send each digit d. Therefore, 987 becomes 1111011011 and would cost $\\$$1 + $\\$$1 + $\\$$1 + $\\$$1 + $\\$$0 + $\\$$1 + $\\$$1 + $\\$$0 + $\\$$1 + $\\$$1 = $\\$$8.\n\nWhat is the largest integer less than 1000 that costs the same whether using Option 1 or Option 2? The final Answer is 503\n ### Proof\n First, we need to find the largest possible value when sending a number with Option 2. If we had 10 1s the smallest binary number would be: $$1111111111_2=1023$$ This is greater than 1000, so the greatest possible cost when sending with option 2 will be 9.\n We can look at the largest numbers less than 1000 which cost 9 with Option 1 and see if they cost 9 with option 2. The largest numbers are: $$900,810,801,720,711,702,...$$ The smallest possible number with 10 digits and cost 9 in Option 2 is: $$1011111111_2=767$$ Below this, we would have: $$111111111_2=511$$ which doesn't work.\n We can quickly check the numbers above and see that they cost less than 9 with method 2.\n So, we now need to consider numbers with cost of 8. The largest numbers with a cost of 8 in Option 1 are: $$800,710,701,620,611,602,530,521,512,503,...$$ It is possible to check these in base 2 and see which is the first to cost 8 with Option 2, or we can go the other way and look at numbers with a cost of 8 in Option 2.\n Either way, we will find the largest possible integer with a cost of 8 is: $$111110111_2 = 503$$ We must check and make sure that there are no numbers larger than $503$ with an Option 2 cost lower than 8.\n The numbers with cost 7 in Option 1 with value greater than $503$ are $700$, $610$, $601$, and $520$.\n We can check that all cost less than 7 in Option 2 and can be eliminated. The numbers with cost 6 in Option 1 with value greater than $503$ are $600$ and $510$, neither of which have cost 6 in Option 2 and therefore do not work.\n Since a number with cost 5 or lower must be less than 500, the largest possible integer is $\\boxed{503}$.\n *)\n\ntheorem\nfixes n :: nat and cost1 cost2 :: \"nat \\<Rightarrow> nat\"\nassumes h0 : \"n < 1000\"\nand h1 : \"\\<forall> d. cost1 (n div 10^d mod 10) = d\"\nand h2 : \"\\<forall> d. cost2 ((n div 2^d mod 2) * (2 ^ (n div 2 ^ d mod 2))) = d\"\nshows  \"Max {n. cost1 n = cost2 n} = 503\"\n proof- \n  show ?thesis sledgehammer",
        "informal problem": "Given a natural number $n$ less than $1000$, we have two cost functions $cost1$ and $cost2$. The cost function $cost1$ of $n$ is defined as $n$ divided by $10^d$ modulo $10$ equals $d$. The cost function $cost2$ of $n$ is defined as $n$ divided by $2^d$ modulo $2$ times $2$ to the power of $n$ divided by $2^d$ modulo $2$ equals $d$. What is the maximum value of $n$ such that $cost1(n) = cost2(n)$? The final answer is $503$."
    },
    "a_9": {
        "formal problem": "theorem\nfixes cost1 cost2 :: \"int \\<Rightarrow> int\"\nassumes h0 : \"\\<forall>n. n \\<ge> 0 \\<and> n < 1000 \\<longrightarrow> cost1 n = (\\<Sum>d\\<leftarrow>digits (int 10) n. d)\"\nand h1 : \"\\<forall>n. n \\<ge> 0 \\<and> n < 1000 \\<longrightarrow> cost2 n = (\\<Sum>d\\<leftarrow>digits (int 2) n. d)\"\nshows  \"GREATEST n. \\<forall>n. n \\<ge> 0 \\<and> n < 1000 \\<and> cost1 n = cost2 n = 503\"",
        "formal solution": "(* ### Problem\n To transmit a positive integer less than 1000, the Networked Number Node offers two options.\n\nOption 1. Pay $\\$$d to send each digit d. Therefore, 987 would cost $\\$$9 + $\\$$8 + $\\$$7 = $\\$$24 to transmit.\n\nOption 2. Encode integer into binary (base 2) first, and then pay $\\$$d to send each digit d. Therefore, 987 becomes 1111011011 and would cost $\\$$1 + $\\$$1 + $\\$$1 + $\\$$1 + $\\$$0 + $\\$$1 + $\\$$1 + $\\$$0 + $\\$$1 + $\\$$1 = $\\$$8.\n\nWhat is the largest integer less than 1000 that costs the same whether using Option 1 or Option 2? The final Answer is 503\n ### Proof\n First, we need to find the largest possible value when sending a number with Option 2. If we had 10 1s the smallest binary number would be: $$1111111111_2=1023$$ This is greater than 1000, so the greatest possible cost when sending with option 2 will be 9.\n We can look at the largest numbers less than 1000 which cost 9 with Option 1 and see if they cost 9 with option 2. The largest numbers are: $$900,810,801,720,711,702,...$$ The smallest possible number with 10 digits and cost 9 in Option 2 is: $$1011111111_2=767$$ Below this, we would have: $$111111111_2=511$$ which doesn't work.\n We can quickly check the numbers above and see that they cost less than 9 with method 2.\n So, we now need to consider numbers with cost of 8. The largest numbers with a cost of 8 in Option 1 are: $$800,710,701,620,611,602,530,521,512,503,...$$ It is possible to check these in base 2 and see which is the first to cost 8 with Option 2, or we can go the other way and look at numbers with a cost of 8 in Option 2.\n Either way, we will find the largest possible integer with a cost of 8 is: $$111110111_2 = 503$$ We must check and make sure that there are no numbers larger than $503$ with an Option 2 cost lower than 8.\n The numbers with cost 7 in Option 1 with value greater than $503$ are $700$, $610$, $601$, and $520$.\n We can check that all cost less than 7 in Option 2 and can be eliminated. The numbers with cost 6 in Option 1 with value greater than $503$ are $600$ and $510$, neither of which have cost 6 in Option 2 and therefore do not work.\n Since a number with cost 5 or lower must be less than 500, the largest possible integer is $\\boxed{503}$.\n *)\n\ntheorem\nfixes cost1 cost2 :: \"int \\<Rightarrow> int\"\nassumes h0 : \"\\<forall>n. n \\<ge> 0 \\<and> n < 1000 \\<longrightarrow> cost1 n = (\\<Sum>d\\<leftarrow>digits (int 10) n. d)\"\nand h1 : \"\\<forall>n. n \\<ge> 0 \\<and> n < 1000 \\<longrightarrow> cost2 n = (\\<Sum>d\\<leftarrow>digits (int 2) n. d)\"\nshows  \"GREATEST n. \\<forall>n. n \\<ge> 0 \\<and> n < 1000 \\<and> cost1 n = cost2 n = 503\"\n proof- \n  show ?thesis sledgehammer",
        "informal problem": "Find the greatest number less than 1000 such that the sum of the decimal digits (base 10) is equal to the sum of the binary digits (base 2). The final answer is 503."
    },
    "level": "Level 5",
    "type": "Number Theory"
}