{
    "natural problem": "There are 5 yellow pegs, 4 red pegs, 3 green pegs, 2 blue pegs, and 1 orange peg to be placed on a triangular peg board. In how many ways can the pegs be placed so that no (horizontal) row or (vertical) column contains two or more pegs of the same color?  (Any two pegs of the same color are indistinguishable.)\n\n[asy]\ndraw((0,0)--(5.5,0)--(0,5.5)--cycle);\nfor (int i=0; i<5; ++i) {\ndot((0.5,i+0.5));\n}\nfor (int i=0; i<4; ++i) {\ndot((1.5,i+0.5));\n}\nfor (int i=0; i<3; ++i) {\ndot((2.5,i+0.5));\n}\nfor (int i=0; i<2; ++i) {\ndot((3.5, i+0.5));\n}\ndot((4.5,0.5));\n[/asy]",
    "natural solution": [
        "To avoid having two yellow pegs in the same row or column, there must be exactly one yellow peg in each row and in each column.",
        "Hence, starting at the top of the array, the peg in the first row must be yellow, the second peg of the second row must be yellow, the third peg of the third row must be yellow, etc.",
        "To avoid having two red pegs in some row, there must be a red peg in each of rows 2,3,4, and 5. The red pegs must be in the first position of the second row, the second position of the third row, etc. Continuation yields exactly $\\boxed{1}$ ordering that meets the requirements, as shown.",
        "[asy] draw((-0.5,0)--(5.5,0)--(-0.5,5.5)--cycle); for (int i=0; i<5; ++i) { label(\"y\",(i,4-i),N); } for (int i=0;i<4;++i) { label(\"r\",(i,3-i),N); } for (int i=0; i<3; ++i) { label(\"g\",(i,2-i),N); } for (int i=0; i<2; ++i) {",
        "label(\"b\",(i,1-i),N); } label(\"o\",(0,0),N); [/asy]"
    ],
    "natural answer": "1",
    "a_0": {
        "formal problem": "theorem\nfixes num_ways :: nat\nassumes h0 : \"num_ways = card {f :: (nat \\<times> nat) \\<Rightarrow> nat. valid_coloring f}\"\nand h1 : \"valid_coloring f = (\n  (\\<forall>x. x \\<in> {1..5} \\<longrightarrow> f (1, x) = 1) \\<and>\n  (\\<forall>x. x \\<in> {1..4} \\<longrightarrow> f (2, x) = 2) \\<and>\n  (\\<forall>x. x \\<in> {1..3} \\<longrightarrow> f (3, x) = 3) \\<and>\n  (\\<forall>x. x \\<in> {1..2} \\<longrightarrow> f (4, x) = 4) \\<and>\n  (\\<forall>x. x \\<in> {1..1} \\<longrightarrow> f (5, x) = 5) \\<and>\n  (\\<forall>i j k. i \\<noteq> j \\<longrightarrow> f (i, k) \\<noteq> f (j, k)) \\<and>\n  (\\<forall>i j k. i \\<noteq> j \\<longrightarrow> f (k, i) \\<noteq> f (k, j)))\"\nshows  \"num_ways = 1\"",
        "formal solution": "(* ### Problem\n There are 5 yellow pegs, 4 red pegs, 3 green pegs, 2 blue pegs, and 1 orange peg to be placed on a triangular peg board. In how many ways can the pegs be placed so that no (horizontal) row or (vertical) column contains two or more pegs of the same color?  (Any two pegs of the same color are indistinguishable.)\n\n[asy]\ndraw((0,0)--(5.5,0)--(0,5.5)--cycle);\nfor (int i=0; i<5; ++i) {\ndot((0.5,i+0.5));\n}\nfor (int i=0; i<4; ++i) {\ndot((1.5,i+0.5));\n}\nfor (int i=0; i<3; ++i) {\ndot((2.5,i+0.5));\n}\nfor (int i=0; i<2; ++i) {\ndot((3.5, i+0.5));\n}\ndot((4.5,0.5));\n[/asy] The final Answer is 1\n ### Proof\n To avoid having two yellow pegs in the same row or column, there must be exactly one yellow peg in each row and in each column.\n Hence, starting at the top of the array, the peg in the first row must be yellow, the second peg of the second row must be yellow, the third peg of the third row must be yellow, etc.\n To avoid having two red pegs in some row, there must be a red peg in each of rows 2,3,4, and 5. The red pegs must be in the first position of the second row, the second position of the third row, etc. Continuation yields exactly $\\boxed{1}$ ordering that meets the requirements, as shown.\n [asy] draw((-0.5,0)--(5.5,0)--(-0.5,5.5)--cycle); for (int i=0; i<5; ++i) { label(\"y\",(i,4-i),N); } for (int i=0;i<4;++i) { label(\"r\",(i,3-i),N); } for (int i=0; i<3; ++i) { label(\"g\",(i,2-i),N); } for (int i=0; i<2; ++i) {\n label(\"b\",(i,1-i),N); } label(\"o\",(0,0),N); [/asy]\n *)\n\ntheorem\nfixes num_ways :: nat\nassumes h0 : \"num_ways = card {f :: (nat \\<times> nat) \\<Rightarrow> nat. valid_coloring f}\"\nand h1 : \"valid_coloring f = (\n  (\\<forall>x. x \\<in> {1..5} \\<longrightarrow> f (1, x) = 1) \\<and>\n  (\\<forall>x. x \\<in> {1..4} \\<longrightarrow> f (2, x) = 2) \\<and>\n  (\\<forall>x. x \\<in> {1..3} \\<longrightarrow> f (3, x) = 3) \\<and>\n  (\\<forall>x. x \\<in> {1..2} \\<longrightarrow> f (4, x) = 4) \\<and>\n  (\\<forall>x. x \\<in> {1..1} \\<longrightarrow> f (5, x) = 5) \\<and>\n  (\\<forall>i j k. i \\<noteq> j \\<longrightarrow> f (i, k) \\<noteq> f (j, k)) \\<and>\n  (\\<forall>i j k. i \\<noteq> j \\<longrightarrow> f (k, i) \\<noteq> f (k, j)))\"\nshows  \"num_ways = 1\"\n proof- \n  show ?thesis sledgehammer",
        "informal problem": "Consider a coloring of a grid with 5 rows and 5 columns. A coloring is valid if every cell in the first row is colored 1, every cell in the second row is colored 2, every cell in the third row is colored 3, every cell in the fourth row is colored 4, and the only cell in the fifth row is colored 5. Additionally, no two cells in the same column or row can have the same color. How many valid colorings are there? The final answer is 1."
    },
    "a_1": {
        "formal problem": "theorem\nfixes yellow red green blue orange :: nat\nassumes h0 : \"yellow = 5\"\nand h1 : \"red = 4\"\nand h2 : \"green = 3\"\nand h3 : \"blue = 2\"\nand h4 : \"orange = 1\"\nand h5 : \"no_vertical_horizontal_duplicate_colors\"\nshows  \"number_of_ways = 1\"",
        "formal solution": "(* ### Problem\n There are 5 yellow pegs, 4 red pegs, 3 green pegs, 2 blue pegs, and 1 orange peg to be placed on a triangular peg board. In how many ways can the pegs be placed so that no (horizontal) row or (vertical) column contains two or more pegs of the same color?  (Any two pegs of the same color are indistinguishable.)\n\n[asy]\ndraw((0,0)--(5.5,0)--(0,5.5)--cycle);\nfor (int i=0; i<5; ++i) {\ndot((0.5,i+0.5));\n}\nfor (int i=0; i<4; ++i) {\ndot((1.5,i+0.5));\n}\nfor (int i=0; i<3; ++i) {\ndot((2.5,i+0.5));\n}\nfor (int i=0; i<2; ++i) {\ndot((3.5, i+0.5));\n}\ndot((4.5,0.5));\n[/asy] The final Answer is 1\n ### Proof\n To avoid having two yellow pegs in the same row or column, there must be exactly one yellow peg in each row and in each column.\n Hence, starting at the top of the array, the peg in the first row must be yellow, the second peg of the second row must be yellow, the third peg of the third row must be yellow, etc.\n To avoid having two red pegs in some row, there must be a red peg in each of rows 2,3,4, and 5. The red pegs must be in the first position of the second row, the second position of the third row, etc. Continuation yields exactly $\\boxed{1}$ ordering that meets the requirements, as shown.\n [asy] draw((-0.5,0)--(5.5,0)--(-0.5,5.5)--cycle); for (int i=0; i<5; ++i) { label(\"y\",(i,4-i),N); } for (int i=0;i<4;++i) { label(\"r\",(i,3-i),N); } for (int i=0; i<3; ++i) { label(\"g\",(i,2-i),N); } for (int i=0; i<2; ++i) {\n label(\"b\",(i,1-i),N); } label(\"o\",(0,0),N); [/asy]\n *)\n\ntheorem\nfixes yellow red green blue orange :: nat\nassumes h0 : \"yellow = 5\"\nand h1 : \"red = 4\"\nand h2 : \"green = 3\"\nand h3 : \"blue = 2\"\nand h4 : \"orange = 1\"\nand h5 : \"no_vertical_horizontal_duplicate_colors\"\nshows  \"number_of_ways = 1\"\n proof- \n  show ?thesis sledgehammer",
        "informal problem": "There are five colors: yellow, red, green, blue, and orange. Yellow has a value of 5, red has a value of 4, green has a value of 3, blue has a value of 2, and orange has a value of 1. If no colors can be duplicated vertically or horizontally, how many ways can the colors be arranged? The final answer is 1."
    },
    "a_2": {
        "formal problem": "theorem\nfixes pegs :: \"nat list\"\nassumes h0 : \"pegs = [5, 4, 3, 2, 1]\"\nand h1 : \"\\<forall> i j. i < length pegs \\<and> j < length pegs \\<and> i \\<noteq> j\n  \\<longrightarrow> count (rows i) (pegs ! j) = 0 \\<and> count (columns i) (pegs ! j) = 0\"\nshows  \"num_arrangements pegs = 1\"",
        "formal solution": "(* ### Problem\n There are 5 yellow pegs, 4 red pegs, 3 green pegs, 2 blue pegs, and 1 orange peg to be placed on a triangular peg board. In how many ways can the pegs be placed so that no (horizontal) row or (vertical) column contains two or more pegs of the same color?  (Any two pegs of the same color are indistinguishable.)\n\n[asy]\ndraw((0,0)--(5.5,0)--(0,5.5)--cycle);\nfor (int i=0; i<5; ++i) {\ndot((0.5,i+0.5));\n}\nfor (int i=0; i<4; ++i) {\ndot((1.5,i+0.5));\n}\nfor (int i=0; i<3; ++i) {\ndot((2.5,i+0.5));\n}\nfor (int i=0; i<2; ++i) {\ndot((3.5, i+0.5));\n}\ndot((4.5,0.5));\n[/asy] The final Answer is 1\n ### Proof\n To avoid having two yellow pegs in the same row or column, there must be exactly one yellow peg in each row and in each column.\n Hence, starting at the top of the array, the peg in the first row must be yellow, the second peg of the second row must be yellow, the third peg of the third row must be yellow, etc.\n To avoid having two red pegs in some row, there must be a red peg in each of rows 2,3,4, and 5. The red pegs must be in the first position of the second row, the second position of the third row, etc. Continuation yields exactly $\\boxed{1}$ ordering that meets the requirements, as shown.\n [asy] draw((-0.5,0)--(5.5,0)--(-0.5,5.5)--cycle); for (int i=0; i<5; ++i) { label(\"y\",(i,4-i),N); } for (int i=0;i<4;++i) { label(\"r\",(i,3-i),N); } for (int i=0; i<3; ++i) { label(\"g\",(i,2-i),N); } for (int i=0; i<2; ++i) {\n label(\"b\",(i,1-i),N); } label(\"o\",(0,0),N); [/asy]\n *)\n\ntheorem\nfixes pegs :: \"nat list\"\nassumes h0 : \"pegs = [5, 4, 3, 2, 1]\"\nand h1 : \"\\<forall> i j. i < length pegs \\<and> j < length pegs \\<and> i \\<noteq> j\n  \\<longrightarrow> count (rows i) (pegs ! j) = 0 \\<and> count (columns i) (pegs ! j) = 0\"\nshows  \"num_arrangements pegs = 1\"\n proof- \n  show ?thesis sledgehammer",
        "informal problem": "Given a list of pegs with heights [5, 4, 3, 2, 1], find the number of possible arrangements such that no two pegs of the same height are in the same row or column. The final answer is 1."
    },
    "a_3": {
        "formal problem": "theorem\nfixes yellow pegs red pegs green pegs blue pegs orange pegs triangular_board :: nat\nassumes h0 : \"yellow pegs = 5\"\nand h1 : \"red pegs = 4\"\nand h2 : \"green pegs = 3\"\nand h3 : \"blue pegs = 2\"\nand h4 : \"orange pegs = 1\"\nand h5 : \"triangular_board = (yellow pegs + red pegs + green pegs + blue pegs + orange pegs) * (yellow pegs + red pegs + green pegs + blue pegs + orange pegs + 1) div 2\"\nand h6 : \"distinct_colors_in_rows_and_columns triangular_board yellow pegs red pegs green pegs blue pegs orange pegs\"\nshows  \"number_of_ways_to_place_pegs = 1\"",
        "formal solution": "(* ### Problem\n There are 5 yellow pegs, 4 red pegs, 3 green pegs, 2 blue pegs, and 1 orange peg to be placed on a triangular peg board. In how many ways can the pegs be placed so that no (horizontal) row or (vertical) column contains two or more pegs of the same color?  (Any two pegs of the same color are indistinguishable.)\n\n[asy]\ndraw((0,0)--(5.5,0)--(0,5.5)--cycle);\nfor (int i=0; i<5; ++i) {\ndot((0.5,i+0.5));\n}\nfor (int i=0; i<4; ++i) {\ndot((1.5,i+0.5));\n}\nfor (int i=0; i<3; ++i) {\ndot((2.5,i+0.5));\n}\nfor (int i=0; i<2; ++i) {\ndot((3.5, i+0.5));\n}\ndot((4.5,0.5));\n[/asy] The final Answer is 1\n ### Proof\n To avoid having two yellow pegs in the same row or column, there must be exactly one yellow peg in each row and in each column.\n Hence, starting at the top of the array, the peg in the first row must be yellow, the second peg of the second row must be yellow, the third peg of the third row must be yellow, etc.\n To avoid having two red pegs in some row, there must be a red peg in each of rows 2,3,4, and 5. The red pegs must be in the first position of the second row, the second position of the third row, etc. Continuation yields exactly $\\boxed{1}$ ordering that meets the requirements, as shown.\n [asy] draw((-0.5,0)--(5.5,0)--(-0.5,5.5)--cycle); for (int i=0; i<5; ++i) { label(\"y\",(i,4-i),N); } for (int i=0;i<4;++i) { label(\"r\",(i,3-i),N); } for (int i=0; i<3; ++i) { label(\"g\",(i,2-i),N); } for (int i=0; i<2; ++i) {\n label(\"b\",(i,1-i),N); } label(\"o\",(0,0),N); [/asy]\n *)\n\ntheorem\nfixes yellow pegs red pegs green pegs blue pegs orange pegs triangular_board :: nat\nassumes h0 : \"yellow pegs = 5\"\nand h1 : \"red pegs = 4\"\nand h2 : \"green pegs = 3\"\nand h3 : \"blue pegs = 2\"\nand h4 : \"orange pegs = 1\"\nand h5 : \"triangular_board = (yellow pegs + red pegs + green pegs + blue pegs + orange pegs) * (yellow pegs + red pegs + green pegs + blue pegs + orange pegs + 1) div 2\"\nand h6 : \"distinct_colors_in_rows_and_columns triangular_board yellow pegs red pegs green pegs blue pegs orange pegs\"\nshows  \"number_of_ways_to_place_pegs = 1\"\n proof- \n  show ?thesis sledgehammer",
        "informal problem": "On a triangular board, there are 5 yellow pegs, 4 red pegs, 3 green pegs, 2 blue pegs, and 1 orange peg. The board has enough spaces for all these pegs, and the pegs must be placed in such a way that no two pegs of the same color are in the same row or column. How many ways are there to place the pegs on the triangular board? The final answer is 1."
    },
    "a_4": {
        "formal problem": "theorem peg_arrangements:\nfixes yellow_pegs :: nat\nand red_pegs :: nat\nand green_pegs :: nat\nand blue_pegs :: nat\nand orange_pegs :: nat\nand arrangements :: nat\nassumes h0 : \"yellow_pegs = 5\"\nand h1 : \"red_pegs = 4\"\nand h2 : \"green_pegs = 3\"\nand h3 : \"blue_pegs = 2\"\nand h4 : \"orange_pegs = 1\"\nand h5 : \"arrangements = (\\<Prod>{1..yellow_pegs} * \\<Prod>{1..red_pegs} * \\<Prod>{1..green_pegs} * \\<Prod>{1..blue_pegs} * \\<Prod>{1..orange_pegs}) div (\\<Prod>{1..15})\"\nand h6 : \"no_two_same_color_row_or_column arrangements\"\nshows  \"arrangements = 1\"",
        "formal solution": "(* ### Problem\n There are 5 yellow pegs, 4 red pegs, 3 green pegs, 2 blue pegs, and 1 orange peg to be placed on a triangular peg board. In how many ways can the pegs be placed so that no (horizontal) row or (vertical) column contains two or more pegs of the same color?  (Any two pegs of the same color are indistinguishable.)\n\n[asy]\ndraw((0,0)--(5.5,0)--(0,5.5)--cycle);\nfor (int i=0; i<5; ++i) {\ndot((0.5,i+0.5));\n}\nfor (int i=0; i<4; ++i) {\ndot((1.5,i+0.5));\n}\nfor (int i=0; i<3; ++i) {\ndot((2.5,i+0.5));\n}\nfor (int i=0; i<2; ++i) {\ndot((3.5, i+0.5));\n}\ndot((4.5,0.5));\n[/asy] The final Answer is 1\n ### Proof\n To avoid having two yellow pegs in the same row or column, there must be exactly one yellow peg in each row and in each column.\n Hence, starting at the top of the array, the peg in the first row must be yellow, the second peg of the second row must be yellow, the third peg of the third row must be yellow, etc.\n To avoid having two red pegs in some row, there must be a red peg in each of rows 2,3,4, and 5. The red pegs must be in the first position of the second row, the second position of the third row, etc. Continuation yields exactly $\\boxed{1}$ ordering that meets the requirements, as shown.\n [asy] draw((-0.5,0)--(5.5,0)--(-0.5,5.5)--cycle); for (int i=0; i<5; ++i) { label(\"y\",(i,4-i),N); } for (int i=0;i<4;++i) { label(\"r\",(i,3-i),N); } for (int i=0; i<3; ++i) { label(\"g\",(i,2-i),N); } for (int i=0; i<2; ++i) {\n label(\"b\",(i,1-i),N); } label(\"o\",(0,0),N); [/asy]\n *)\n\ntheorem peg_arrangements:\nfixes yellow_pegs :: nat\nand red_pegs :: nat\nand green_pegs :: nat\nand blue_pegs :: nat\nand orange_pegs :: nat\nand arrangements :: nat\nassumes h0 : \"yellow_pegs = 5\"\nand h1 : \"red_pegs = 4\"\nand h2 : \"green_pegs = 3\"\nand h3 : \"blue_pegs = 2\"\nand h4 : \"orange_pegs = 1\"\nand h5 : \"arrangements = (\\<Prod>{1..yellow_pegs} * \\<Prod>{1..red_pegs} * \\<Prod>{1..green_pegs} * \\<Prod>{1..blue_pegs} * \\<Prod>{1..orange_pegs}) div (\\<Prod>{1..15})\"\nand h6 : \"no_two_same_color_row_or_column arrangements\"\nshows  \"arrangements = 1\"\n proof- \n  show ?thesis sledgehammer",
        "informal problem": "Suppose there are 5 yellow pegs, 4 red pegs, 3 green pegs, 2 blue pegs, and 1 orange peg. You need to arrange these pegs in a grid such that no two pegs of the same color are in the same row or column. What is the number of arrangements that can be made? The final answer is 1."
    },
    "a_5": {
        "formal problem": "theorem\nfixes yellow_pegs red_pegs green_pegs blue_pegs orange_pegs arrangements :: nat\nassumes h0 : \"yellow_pegs = 5\"\nand h1 : \"red_pegs = 4\"\nand h2 : \"green_pegs = 3\"\nand h3 : \"blue_pegs = 2\"\nand h4 : \"orange_pegs = 1\"\nand h5 : \"arrangements = (\\<forall> row column. \\<exists>! peg_board. no_adjacent_same_color peg_board row column)\"\nshows  \"arrangements = 1\"",
        "formal solution": "(* ### Problem\n There are 5 yellow pegs, 4 red pegs, 3 green pegs, 2 blue pegs, and 1 orange peg to be placed on a triangular peg board. In how many ways can the pegs be placed so that no (horizontal) row or (vertical) column contains two or more pegs of the same color?  (Any two pegs of the same color are indistinguishable.)\n\n[asy]\ndraw((0,0)--(5.5,0)--(0,5.5)--cycle);\nfor (int i=0; i<5; ++i) {\ndot((0.5,i+0.5));\n}\nfor (int i=0; i<4; ++i) {\ndot((1.5,i+0.5));\n}\nfor (int i=0; i<3; ++i) {\ndot((2.5,i+0.5));\n}\nfor (int i=0; i<2; ++i) {\ndot((3.5, i+0.5));\n}\ndot((4.5,0.5));\n[/asy] The final Answer is 1\n ### Proof\n To avoid having two yellow pegs in the same row or column, there must be exactly one yellow peg in each row and in each column.\n Hence, starting at the top of the array, the peg in the first row must be yellow, the second peg of the second row must be yellow, the third peg of the third row must be yellow, etc.\n To avoid having two red pegs in some row, there must be a red peg in each of rows 2,3,4, and 5. The red pegs must be in the first position of the second row, the second position of the third row, etc. Continuation yields exactly $\\boxed{1}$ ordering that meets the requirements, as shown.\n [asy] draw((-0.5,0)--(5.5,0)--(-0.5,5.5)--cycle); for (int i=0; i<5; ++i) { label(\"y\",(i,4-i),N); } for (int i=0;i<4;++i) { label(\"r\",(i,3-i),N); } for (int i=0; i<3; ++i) { label(\"g\",(i,2-i),N); } for (int i=0; i<2; ++i) {\n label(\"b\",(i,1-i),N); } label(\"o\",(0,0),N); [/asy]\n *)\n\ntheorem\nfixes yellow_pegs red_pegs green_pegs blue_pegs orange_pegs arrangements :: nat\nassumes h0 : \"yellow_pegs = 5\"\nand h1 : \"red_pegs = 4\"\nand h2 : \"green_pegs = 3\"\nand h3 : \"blue_pegs = 2\"\nand h4 : \"orange_pegs = 1\"\nand h5 : \"arrangements = (\\<forall> row column. \\<exists>! peg_board. no_adjacent_same_color peg_board row column)\"\nshows  \"arrangements = 1\"\n proof- \n  show ?thesis sledgehammer",
        "informal problem": "There is a peg board with 5 yellow pegs, 4 red pegs, 3 green pegs, 2 blue pegs, and 1 orange peg. How many different arrangements can you create on the peg board such that no two pegs of the same color are adjacent to each other (horizontally or vertically)? The final answer is 1."
    },
    "a_6": {
        "formal problem": "theorem\nfixes yellow_pegs red_pegs green_pegs blue_pegs orange_pegs :: nat\nand arrangements :: nat\nassumes h0 : \"yellow_pegs = 5\"\nand h1 : \"red_pegs = 4\"\nand h2 : \"green_pegs = 3\"\nand h3 : \"blue_pegs = 2\"\nand h4 : \"orange_pegs = 1\"\nand h5 : \"arrangements = count_arrangements yellow_pegs red_pegs green_pegs blue_pegs orange_pegs\"\nshows  \"arrangements = 1\"",
        "formal solution": "(* ### Problem\n There are 5 yellow pegs, 4 red pegs, 3 green pegs, 2 blue pegs, and 1 orange peg to be placed on a triangular peg board. In how many ways can the pegs be placed so that no (horizontal) row or (vertical) column contains two or more pegs of the same color?  (Any two pegs of the same color are indistinguishable.)\n\n[asy]\ndraw((0,0)--(5.5,0)--(0,5.5)--cycle);\nfor (int i=0; i<5; ++i) {\ndot((0.5,i+0.5));\n}\nfor (int i=0; i<4; ++i) {\ndot((1.5,i+0.5));\n}\nfor (int i=0; i<3; ++i) {\ndot((2.5,i+0.5));\n}\nfor (int i=0; i<2; ++i) {\ndot((3.5, i+0.5));\n}\ndot((4.5,0.5));\n[/asy] The final Answer is 1\n ### Proof\n To avoid having two yellow pegs in the same row or column, there must be exactly one yellow peg in each row and in each column.\n Hence, starting at the top of the array, the peg in the first row must be yellow, the second peg of the second row must be yellow, the third peg of the third row must be yellow, etc.\n To avoid having two red pegs in some row, there must be a red peg in each of rows 2,3,4, and 5. The red pegs must be in the first position of the second row, the second position of the third row, etc. Continuation yields exactly $\\boxed{1}$ ordering that meets the requirements, as shown.\n [asy] draw((-0.5,0)--(5.5,0)--(-0.5,5.5)--cycle); for (int i=0; i<5; ++i) { label(\"y\",(i,4-i),N); } for (int i=0;i<4;++i) { label(\"r\",(i,3-i),N); } for (int i=0; i<3; ++i) { label(\"g\",(i,2-i),N); } for (int i=0; i<2; ++i) {\n label(\"b\",(i,1-i),N); } label(\"o\",(0,0),N); [/asy]\n *)\n\ntheorem\nfixes yellow_pegs red_pegs green_pegs blue_pegs orange_pegs :: nat\nand arrangements :: nat\nassumes h0 : \"yellow_pegs = 5\"\nand h1 : \"red_pegs = 4\"\nand h2 : \"green_pegs = 3\"\nand h3 : \"blue_pegs = 2\"\nand h4 : \"orange_pegs = 1\"\nand h5 : \"arrangements = count_arrangements yellow_pegs red_pegs green_pegs blue_pegs orange_pegs\"\nshows  \"arrangements = 1\"\n proof- \n  show ?thesis sledgehammer",
        "informal problem": "How many different arrangements are there for placing 5 yellow pegs, 4 red pegs, 3 green pegs, 2 blue pegs, and 1 orange peg in a row? The final answer is 1."
    },
    "a_7": {
        "formal problem": "theorem\nfixes yellow red green blue orange :: nat\nassumes h0 : \"yellow = 5\"\nand h1 : \"red = 4\"\nand h2 : \"green = 3\"\nand h3 : \"blue = 2\"\nand h4 : \"orange = 1\"\nand h5 : \"no_horizontal_row_has_same_color yellow red green blue orange\"\nand h6 : \"no_vertical_column_has_same_color yellow red green blue orange\"\nshows  \"number_of_ways_to_place_pegs yellow red green blue orange = 1\"",
        "formal solution": "(* ### Problem\n There are 5 yellow pegs, 4 red pegs, 3 green pegs, 2 blue pegs, and 1 orange peg to be placed on a triangular peg board. In how many ways can the pegs be placed so that no (horizontal) row or (vertical) column contains two or more pegs of the same color?  (Any two pegs of the same color are indistinguishable.)\n\n[asy]\ndraw((0,0)--(5.5,0)--(0,5.5)--cycle);\nfor (int i=0; i<5; ++i) {\ndot((0.5,i+0.5));\n}\nfor (int i=0; i<4; ++i) {\ndot((1.5,i+0.5));\n}\nfor (int i=0; i<3; ++i) {\ndot((2.5,i+0.5));\n}\nfor (int i=0; i<2; ++i) {\ndot((3.5, i+0.5));\n}\ndot((4.5,0.5));\n[/asy] The final Answer is 1\n ### Proof\n To avoid having two yellow pegs in the same row or column, there must be exactly one yellow peg in each row and in each column.\n Hence, starting at the top of the array, the peg in the first row must be yellow, the second peg of the second row must be yellow, the third peg of the third row must be yellow, etc.\n To avoid having two red pegs in some row, there must be a red peg in each of rows 2,3,4, and 5. The red pegs must be in the first position of the second row, the second position of the third row, etc. Continuation yields exactly $\\boxed{1}$ ordering that meets the requirements, as shown.\n [asy] draw((-0.5,0)--(5.5,0)--(-0.5,5.5)--cycle); for (int i=0; i<5; ++i) { label(\"y\",(i,4-i),N); } for (int i=0;i<4;++i) { label(\"r\",(i,3-i),N); } for (int i=0; i<3; ++i) { label(\"g\",(i,2-i),N); } for (int i=0; i<2; ++i) {\n label(\"b\",(i,1-i),N); } label(\"o\",(0,0),N); [/asy]\n *)\n\ntheorem\nfixes yellow red green blue orange :: nat\nassumes h0 : \"yellow = 5\"\nand h1 : \"red = 4\"\nand h2 : \"green = 3\"\nand h3 : \"blue = 2\"\nand h4 : \"orange = 1\"\nand h5 : \"no_horizontal_row_has_same_color yellow red green blue orange\"\nand h6 : \"no_vertical_column_has_same_color yellow red green blue orange\"\nshows  \"number_of_ways_to_place_pegs yellow red green blue orange = 1\"\n proof- \n  show ?thesis sledgehammer",
        "informal problem": "There are 5 pegs of different colors: yellow, red, green, blue, and orange. The colors have the following values: yellow = 5, red = 4, green = 3, blue = 2, and orange = 1. Find the number of ways to place these pegs in a grid such that no horizontal row or vertical column has the same color. The final answer is 1."
    },
    "a_8": {
        "formal problem": "theorem peg_board_problem:\nfixes yellow_pegs red_pegs green_pegs blue_pegs orange_pegs :: nat\nassumes h0 : \"yellow_pegs = 5\"\nand h1 : \"red_pegs = 4\"\nand h2 : \"green_pegs = 3\"\nand h3 : \"blue_pegs = 2\"\nand h4 : \"orange_pegs = 1\"\nand h5 : \"\\<forall>row column. (row \\<noteq> column) \\<longrightarrow> (\\<exists>color. (\\<forall>peg. peg \\<in> {yellow_pegs, red_pegs, green_pegs, blue_pegs, orange_pegs} \\<and> peg \\<noteq> color) \\<longrightarrow> (\\<forall>i \\<in> {1..row}. \\<forall>j \\<in> {1..column}. count (pegs i j) color = 0))\"\nshows  \"\\<exists>n. n = 1\"",
        "formal solution": "(* ### Problem\n There are 5 yellow pegs, 4 red pegs, 3 green pegs, 2 blue pegs, and 1 orange peg to be placed on a triangular peg board. In how many ways can the pegs be placed so that no (horizontal) row or (vertical) column contains two or more pegs of the same color?  (Any two pegs of the same color are indistinguishable.)\n\n[asy]\ndraw((0,0)--(5.5,0)--(0,5.5)--cycle);\nfor (int i=0; i<5; ++i) {\ndot((0.5,i+0.5));\n}\nfor (int i=0; i<4; ++i) {\ndot((1.5,i+0.5));\n}\nfor (int i=0; i<3; ++i) {\ndot((2.5,i+0.5));\n}\nfor (int i=0; i<2; ++i) {\ndot((3.5, i+0.5));\n}\ndot((4.5,0.5));\n[/asy] The final Answer is 1\n ### Proof\n To avoid having two yellow pegs in the same row or column, there must be exactly one yellow peg in each row and in each column.\n Hence, starting at the top of the array, the peg in the first row must be yellow, the second peg of the second row must be yellow, the third peg of the third row must be yellow, etc.\n To avoid having two red pegs in some row, there must be a red peg in each of rows 2,3,4, and 5. The red pegs must be in the first position of the second row, the second position of the third row, etc. Continuation yields exactly $\\boxed{1}$ ordering that meets the requirements, as shown.\n [asy] draw((-0.5,0)--(5.5,0)--(-0.5,5.5)--cycle); for (int i=0; i<5; ++i) { label(\"y\",(i,4-i),N); } for (int i=0;i<4;++i) { label(\"r\",(i,3-i),N); } for (int i=0; i<3; ++i) { label(\"g\",(i,2-i),N); } for (int i=0; i<2; ++i) {\n label(\"b\",(i,1-i),N); } label(\"o\",(0,0),N); [/asy]\n *)\n\ntheorem peg_board_problem:\nfixes yellow_pegs red_pegs green_pegs blue_pegs orange_pegs :: nat\nassumes h0 : \"yellow_pegs = 5\"\nand h1 : \"red_pegs = 4\"\nand h2 : \"green_pegs = 3\"\nand h3 : \"blue_pegs = 2\"\nand h4 : \"orange_pegs = 1\"\nand h5 : \"\\<forall>row column. (row \\<noteq> column) \\<longrightarrow> (\\<exists>color. (\\<forall>peg. peg \\<in> {yellow_pegs, red_pegs, green_pegs, blue_pegs, orange_pegs} \\<and> peg \\<noteq> color) \\<longrightarrow> (\\<forall>i \\<in> {1..row}. \\<forall>j \\<in> {1..column}. count (pegs i j) color = 0))\"\nshows  \"\\<exists>n. n = 1\"\n proof- \n  show ?thesis sledgehammer",
        "informal problem": "In a peg board, there are 5 yellow pegs, 4 red pegs, 3 green pegs, 2 blue pegs, and 1 orange peg. If no two pegs of the same color can be in the same row or column, is there a way to arrange the pegs on the board? If so, provide the number of ways. The final answer is 1."
    },
    "a_9": {
        "formal problem": "theorem\nfixes yellow_pegs red_pegs green_pegs blue_pegs orange_pegs :: nat\nand triangular_board :: \"nat \\<Rightarrow> nat\"\nassumes h0 : \"yellow_pegs = 5\"\nand h1 : \"red_pegs = 4\"\nand h2 : \"green_pegs = 3\"\nand h3 : \"blue_pegs = 2\"\nand h4 : \"orange_pegs = 1\"\nand h5 : \"\\<forall> i j. i \\<noteq> j \\<longrightarrow> (triangular_board i \\<noteq> triangular_board j)\"\nand h6 : \"\\<forall> i. i < 5 \\<longrightarrow> (\\<exists> j. j < 5 \\<and> triangular_board i = yellow_pegs + red_pegs + green_pegs + blue_pegs + j)\"\nshows  \"card {i. i < 5 \\<and> (\\<exists> j. j < 5 \\<and> triangular_board i = yellow_pegs + red_pegs + green_pegs + blue_pegs + j)} = 1\"",
        "formal solution": "(* ### Problem\n There are 5 yellow pegs, 4 red pegs, 3 green pegs, 2 blue pegs, and 1 orange peg to be placed on a triangular peg board. In how many ways can the pegs be placed so that no (horizontal) row or (vertical) column contains two or more pegs of the same color?  (Any two pegs of the same color are indistinguishable.)\n\n[asy]\ndraw((0,0)--(5.5,0)--(0,5.5)--cycle);\nfor (int i=0; i<5; ++i) {\ndot((0.5,i+0.5));\n}\nfor (int i=0; i<4; ++i) {\ndot((1.5,i+0.5));\n}\nfor (int i=0; i<3; ++i) {\ndot((2.5,i+0.5));\n}\nfor (int i=0; i<2; ++i) {\ndot((3.5, i+0.5));\n}\ndot((4.5,0.5));\n[/asy] The final Answer is 1\n ### Proof\n To avoid having two yellow pegs in the same row or column, there must be exactly one yellow peg in each row and in each column.\n Hence, starting at the top of the array, the peg in the first row must be yellow, the second peg of the second row must be yellow, the third peg of the third row must be yellow, etc.\n To avoid having two red pegs in some row, there must be a red peg in each of rows 2,3,4, and 5. The red pegs must be in the first position of the second row, the second position of the third row, etc. Continuation yields exactly $\\boxed{1}$ ordering that meets the requirements, as shown.\n [asy] draw((-0.5,0)--(5.5,0)--(-0.5,5.5)--cycle); for (int i=0; i<5; ++i) { label(\"y\",(i,4-i),N); } for (int i=0;i<4;++i) { label(\"r\",(i,3-i),N); } for (int i=0; i<3; ++i) { label(\"g\",(i,2-i),N); } for (int i=0; i<2; ++i) {\n label(\"b\",(i,1-i),N); } label(\"o\",(0,0),N); [/asy]\n *)\n\ntheorem\nfixes yellow_pegs red_pegs green_pegs blue_pegs orange_pegs :: nat\nand triangular_board :: \"nat \\<Rightarrow> nat\"\nassumes h0 : \"yellow_pegs = 5\"\nand h1 : \"red_pegs = 4\"\nand h2 : \"green_pegs = 3\"\nand h3 : \"blue_pegs = 2\"\nand h4 : \"orange_pegs = 1\"\nand h5 : \"\\<forall> i j. i \\<noteq> j \\<longrightarrow> (triangular_board i \\<noteq> triangular_board j)\"\nand h6 : \"\\<forall> i. i < 5 \\<longrightarrow> (\\<exists> j. j < 5 \\<and> triangular_board i = yellow_pegs + red_pegs + green_pegs + blue_pegs + j)\"\nshows  \"card {i. i < 5 \\<and> (\\<exists> j. j < 5 \\<and> triangular_board i = yellow_pegs + red_pegs + green_pegs + blue_pegs + j)} = 1\"\n proof- \n  show ?thesis sledgehammer",
        "informal problem": "In a triangular board game, there are 5 yellow pegs, 4 red pegs, 3 green pegs, 2 blue pegs, and 1 orange peg. The triangular_board function assigns a unique number to each of the 5 positions on the board. If the sum of all the pegs plus an integer $j$ (where $0 \\leq j < 5$) is equal to the number assigned to a position on the board, find the number of such positions. The final answer is 1."
    },
    "level": "Level 4",
    "type": "Counting & Probability"
}